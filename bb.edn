{:paths []
 :deps {}
 :tasks {:init (do
                 (defn to-out
                   "Generate options map for process function, write in std"
                   []
                   {:out :inherit
                    :in :inherit
                    :err :inherit
                    :shutdown p/destroy-tree})
                 (defn- cicd?
                   []
                   (System/getenv "CI"))
                 (defn run-processes
                   "Run processes with logs features
                    Params:
                    * `skip-errors` don't print errors if any, useful when a bb call another bb, as the outer one doesn't need to tell the error once again
                    * `processes-strings` each element is sent to process to create a process and execute it"
                   [skip-errors & processes-strings]
                   (try
                     (doseq [process-string processes-strings]
                       (-> process-string
                           (p/process (to-out))
                           p/check))
                     (catch Exception e
                       (println (str "Error during execution of `" (:name (current-task)) "`"))
                       (if (cicd?)
                         (println e)
                         (let [file (fs/create-temp-file)]
                           (println "See details in `" (.toString (.toAbsolutePath file)) "`")
                           (spit (fs/file file) (prn-str e))
                           ""))
                       (System/exit 1)))))
         :requires [[babashka.process :as p]
                    [babashka.fs :as fs]]
         clean-hard {:doc "Clean hard"
                     :task ()}
         ltest {:doc "Local test"
                :task (run-processes false
                                     ["clojure" "-M:env-development-test:common-test"]
                                     #_["npm" "install"]
                                     #_["npx" "shadow-cljs" "compile" "ltest"]
                                     #_["npx" "karma" "start" "--single-run"])}
         lint {:doc "Lint (option -d will print details of file linted)"
               :task (run-processes true
                                    (concat ["clj-kondo"
                                             "--lint"
                                             "env/development/src"
                                             "src"
                                             "test"]
                                            (when (= "-d" (first *command-line-args*))
                                              ["--debug"])))}
         gha {:doc "Github action command - is launched automatically by github"
              :task (run-processes false
                                   ["bb" "lint" "-d"]
                                   ["bb" "ltest"])}
         repl {:doc "Repl"
               :task (run-processes true
                                    ["clojure" "-M:env-development-repl"])}}}
