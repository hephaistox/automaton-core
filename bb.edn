{:paths []
 :deps {}
 :tasks {:init (do
                 (defn to-log
                   "Generate options map for process function, write in logs file"
                   [msg log-filename]
                   (fs/create-dirs "logs")
                   (println msg ", see " log-filename " for details")
                   {:out :write
                    :err :write
                    :err-file log-filename
                    :out-file log-filename
                    :shutdown p/destroy-tree})
                 (defn to-out
                   "Generate options map for process function, write in std"
                   []
                   {:out :inherit
                    :in :inherit
                    :err :inherit
                    :shutdown p/destroy-tree})
                 (defn run-processes
                   "Run processes with logs features
                    Params:
                    * `processes-strings` each element is sent to process to create a process and execute it"
                   [& processes-strings]
                   (try
                     (doseq [process-string processes-strings]
                       (-> process-string
                           (p/process (to-out))
                           p/check))
                     (catch Exception e
                       (println (str "Error during execution of `" (:name (current-task)) "`"))
                       (let [file (fs/create-temp-file)]
                         (println "See details in `" (.toString (.toAbsolutePath file)) "`")
                         (spit (fs/file file) (prn-str e))
                         "")
                       (System/exit 1)))))
         :requires [[babashka.process :as p]
                    [babashka.fs :as fs]]
         ltest {:doc "Local test"
                :task (run-processes ["clj" "-M:env-development-test:common-test"]
                                     ["npm" "install"]
                                     ["npx" "shadow-cljs" "compile" "ltest"]
                                     ["npx" "karma" "start" "--single-run"])}
         lint {:doc "Lint (option -d will print details of file linted)"
               :task (run-processes (apply concat
                                           ["clj-kondo"
                                            "--lint"
                                            "env/development/src"
                                            "src"
                                            "test"]
                                           (when (= "-d" (first *command-line-args*))
                                             "--debug")))}
         repl {:doc "Repl"
               :task (run-processes ["clj" "-M:env-development-repl"])}}}
