{:paths ["src/clj"]
 :deps {hephaistox/automaton-build-app {:git/url "git@github.com:hephaistox/automaton-build-app.git"
                                        :sha "a75e61e65d6f20764f363e603ded3469521993b2"}}
 :tasks {:requires [[automaton-build-app.log :as build-log]
                    [automaton-build-app.os.commands :as build-cmds]
                    [clojure.string :as str]
                    [babashka.fs :as fs]]
         :init (do
                 (defn- cicd? []
                   (System/getenv "CI"))

                 (defn qualified-name [s]
                   (apply str
                          (interpose "/"
                                     ((juxt namespace name) (symbol s)))))

                 (defn- task-name []
                   (-> (babashka.tasks/current-task)
                       :name))

                 (defn run-bb
                   "Run the `body-fn` on the current bb environment"
                   [body-fn]
                   (build-log/trace-format "Run %s task on bb" (task-name))
                   (let [ns (-> (symbol body-fn)
                                namespace
                                symbol)]
                     (require ns)
                     ((resolve body-fn) {:command-line-args *command-line-args*})))

                 (defn run-clj
                   [body-fn]
                   (build-log/trace-format "Run %s task on clj" (task-name))
                   (build-cmds/execute-and-trace ["clojure" "-X" (qualified-name body-fn)
                                                  :command-line-args (pr-str *command-line-args*)]))

                 (defn dispatch
                   "Execute the body-fn directy in currently running bb env
                      * `body` body to execute
                      * `executing-pf` could be :bb or :clj, the task will be executed on one or the other"
                   [body-fn executing-pf]
                   (if (= :clj executing-pf)
                     (run-clj body-fn)
                     (run-bb body-fn)))

                 (defn execute-task
                   "Run the function and manage
                    Params:
                    * `body` body to execute
                    * `executing-pf` (Optional, default = :bb) could be :bb or :clj, the task will be executed on one or the other"
                   [body-fn & executing-pf]
                   (try
                     (build-log/info-format "Run %s task" (-> (current-task)
                                                              :name))
                     (dispatch body-fn
                               (first executing-pf))
                     (catch Exception e
                       (println (format "Error during execution of `%s`, %s`" (:name (current-task)) (pr-str (ex-message e))))
                       (if (cicd?)
                         (println e)
                         (let [file (fs/create-temp-file {:suffix ".edn"})]
                           (println (format "See details in `%s`" (.toString (.toAbsolutePath file))))
                           (spit (fs/file file) (prn-str e))
                           ""))
                       (System/exit 1)))))

         blog {:doc "Transforms md file to pdf based on edn file"
               :task (execute-task 'automaton-build-app.tasks.doc/blog-task :clj)}

         clean {:doc "Clean cache files for compiles, and logs"
                :task (execute-task 'automaton-build-app.tasks.clean/clean)}

         clean-hard {:doc "Clean all files which are not under version control (it doesn't remove untracked file or staged files if there are eligible to `git add .`)"
                     :task (execute-task 'automaton-build-app.tasks.clean/clean-hard)}

         code-doc {:doc "Create the documentation of the app"
                   :task (execute-task 'automaton-build-app.tasks.code-helpers-clj/code-doc :clj)}

         compile-to-jar {:doc "Compile that code to a jar"
                         :task (execute-task 'automaton-build-app.tasks.code-helpers/compile-to-jar :clj)}

         gha {:doc "Github action command - is launched automatically by github"
              :task (execute-task 'automaton-build-app.tasks.test/gha :clj)}

         gha-lconnect {:doc "Connect to a local container running this code"
                       :task (execute-task 'automaton-build-app.tasks.test/gha)}

         lconnect {:doc "Local connect - repl"
                   :task (execute-task 'automaton-build-app.tasks.code-helpers/lconnect)}

         ltest {:doc "Local test"
                :task (execute-task 'automaton-build.app.test/ltest)}

         push {:doc "Push this repo"
               :task (execute-task 'automaton-build-app.tasks.publication/push-from-local :clj)}

         update-deps {:doc "Update the dependencies, cider-nrepl and refactor are to be updated manually"
                      :task (execute-task 'automaton-build-app.tasks.code-helpers-clj/update-deps :clj)}}}
